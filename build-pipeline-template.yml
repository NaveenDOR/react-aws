AWSTemplateFormatVersion: 2010-09-09
Description: A React application deployed to Route53/CloudFront/S3
Conditions:
  CreateCodeBuildResources: !Equals [true, true]
  CreateWebSiteS3Bucket: !Equals [true, true]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: [{Label: {default: Application}, Parameters: [ProjectId]}]
  CodeBuildImage: aws/codebuild/eb-nodejs-4.4.6-amazonlinux-64:2.1.3
  CodeBuildImageOverride: aws/codebuild/eb-nodejs-4.4.6-amazonlinux-64:2.1.3
  IsWebsite: true
  ProjectTemplateId: webapp-nodeweb-lambda
  WebsiteS3Bucket: !Ref 'WebsiteS3Bucket'
Outputs:
  LambdaTrustRole:
    Description: AWS CodeStar role for AWS Lambda used for passRole to Lambda functions.
    Export:
      Name: !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', LambdaTrustRole]]
    Value: !GetAtt 'LambdaTrustRole.Arn'
Parameters:
  AppName:
    Description: Name of the application.
    MaxLength: 100
    MinLength: 1
    Type: String
  CodeCommitRepositoryName:
    Description: AWS CodeCommit repository name.
    MaxLength: 25
    MinLength: 2
    Type: String
  ProjectId:
    AllowedPattern: ^[a-z]([a-z0-9-])+$
    ConstraintDescription: Project IDs must be between 2 and 15 characters, begin with a letter, and only contain lowercase letters, numbers, and hyphens (-).
    Description: Project ID.
    MaxLength: 15
    MinLength: 2
    Type: String
Resources:
  CloudFormationTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CloudFormation
    DependsOn: [CodeStarProject]
    Properties:
      AssumeRolePolicyDocument:
        Statement: [{Action: 'sts:AssumeRole', Effect: Allow, Principal: {Service: [cloudformation.amazonaws.com]}}]
      Path: /
      RoleName: !Join ['-', [CodeStarWorker, !Ref 'ProjectId', CloudFormation]]
      Policies:
        [{
          PolicyDocument: {
            Statement: [{
              Action: [
                's3:PutObject',
                's3:GetObject',
                's3:GetObjectVersion'
              ],
              Effect: Allow,
              Resource: [!Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]]
            }, {
              Action: [
                'codestar:SyncResources',
                'lambda:CreateFunction',
                'lambda:DeleteFunction',
                'lambda:AddPermission',
                'lambda:UpdateFunction',
                'lambda:UpdateFunctionCode',
                'lambda:GetFunctionConfiguration',
                'lambda:UpdateFunctionConfiguration',
                'lambda:RemovePermission',
                'apigateway:*',
                'dynamodb:CreateTable',
                'dynamodb:DeleteTable',
                'dynamodb:DescribeTable',
                'kinesis:CreateStream',
                'kinesis:DeleteStream',
                'kinesis:DescribeStream',
                'sns:CreateTopic',
                'sns:DeleteTopic',
                'sns:ListTopics',
                'sns:GetTopicAttributes',
                'sns:SetTopicAttributes',
                's3:CreateBucket',
                's3:DeleteBucket'
              ],
              Effect: Allow,
              Resource: '*'
            }, {
              Action: ['iam:PassRole'],
              Effect: Allow,
              Resource: [!GetAtt [LambdaTrustRole, Arn]]
            }, {
              Action: ['cloudformation:CreateChangeSet'],
              Effect: Allow,
              Resource: ['arn:aws:cloudformation:us-east-1:aws:transform/Serverless-2016-10-31', 'arn:aws:cloudformation:us-east-1:aws:transform/CodeStar']
            }
          ]},
          PolicyName: CodeStarWorkerCloudFormationRolePolicy
        }]
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Description: Setting IAM policy for service role for Amazon EC2 instances
    Condition: CreateCodeBuildResources
    DependsOn: [CodeStarProject, CodeBuildRole]
    Properties:
      PolicyName: CodeStarWorkerCodeBuildPolicy
      Roles: [!Ref 'CodeBuildRole']
      PolicyDocument:
        Statement: [{
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
            Effect: Allow,
            Resource: '*'
          }, {
            Action: ['s3:PutObject', 's3:GetObject', 's3:GetObjectVersion'],
            Effect: Allow,
            Resource: [!Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]]
          }, !If [CreateWebSiteS3Bucket, {
            Action: ['s3:PutObject*', 's3:GetObject', 's3:GetObjectVersion'],
            Effect: Allow,
            Resource: [!Join ['', ['arn:aws:s3:::', !Ref 'WebsiteS3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteS3Bucket', /*]]]
            }, !Ref 'AWS::NoValue'
          ], {
            Action: ['codecommit:GitPull'],
            Effect: Allow,
            Resource: [!Join [':', [arn, aws, codecommit, !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref 'CodeCommitRepositoryName']]]
          }, {
            Action: [ 'kms:GenerateDataKey*', 'kms:Encrypt', 'kms:Decrypt'],
            Effect: Allow,
            Resource: [!Join [':', ['arn:aws:kms', !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Join [/, [alias, aws/s3]]]]]
        }]
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: CreateCodeBuildResources
    DependsOn: [SeedRepo, CodeBuildPolicy]
    Properties:
      Artifacts:
        Packaging: zip
        Type: codepipeline
      Description: !Join ['', ['AWS CodeStar created CodeBuild Project for ', !Ref 'AppName']]
      Environment:
        Type: container
        ComputeType: small
        Image: aws/codebuild/eb-nodejs-4.4.6-amazonlinux-64:2.1.3
        EnvironmentVariables: [{
            Name: S3_BUCKET,
            Value: !Ref 'S3Bucket'
          }, {
            Name: WEBSITE_S3_PREFIX,
            Value: !If [CreateWebSiteS3Bucket, !Join ['', ['https://s3.amazonaws.com/', !Ref 'WebsiteS3Bucket']], NoVal]
          }, {
            Name: WEBSITE_S3_BUCKET,
            Value: !If [ CreateWebSiteS3Bucket, !Ref 'WebsiteS3Bucket', NoVal]
        }]
      Name: !Ref 'ProjectId'
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        Type: codepipeline
  CodeBuildRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for Amazon EC2 instances
    Condition: CreateCodeBuildResources
    DependsOn: [CodeStarProject]
    Properties:
      AssumeRolePolicyDocument:
        Statement: [{Action: 'sts:AssumeRole', Effect: Allow, Principal: {Service: codebuild.amazonaws.com}}]
      Path: /
      RoleName: !Join ['-', [CodeStarWorker, !Ref 'ProjectId', CodeBuild]]
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Description: Creating AWS CodeCommit repository for application source code
    DependsOn: [CodeStarProject]
    Properties:
      RepositoryDescription: !Join ['', [!Ref 'ProjectId', ' project repository']]
      RepositoryName: !Ref 'CodeCommitRepositoryName'
  CodePipelineTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS CodePipeline
    DependsOn: [CodeStarProject]
    Properties:
      AssumeRolePolicyDocument:
        Statement: [{
          Action: 'sts:AssumeRole',
          Effect: Allow,
          Principal: { Service: [ codepipeline.amazonaws.com ] },
          Sid: 1
        }]
      Path: /
      RoleName: !Join ['-', [CodeStarWorker, !Ref 'ProjectId', CodePipeline]]
      Policies: [{
        PolicyDocument: {
          Statement: [{
            Action: ['s3:GetObject', 's3:GetObjectVersion', 's3:GetBucketVersioning', 's3:PutObject'],
            Effect: Allow,
            Resource: [ !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]]
          }, {
            Action: ['codecommit:CancelUploadArchive', 'codecommit:GetBranch', 'codecommit:GetCommit', 'codecommit:GetUploadArchiveStatus', 'codecommit:UploadArchive'],
            Effect: Allow,
            Resource: [!Join [':', [arn, aws, codecommit, !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref 'CodeCommitRepositoryName']]]
          }, {
            Action: ['codebuild:StartBuild', 'codebuild:BatchGetBuilds', 'codebuild:StopBuild'],
            Effect: Allow,
            Resource: [!GetAtt 'CodeBuildProject.Arn']
          }, {
            Action: ['cloudformation:DescribeStacks', 'cloudformation:DescribeChangeSet', 'cloudformation:CreateChangeSet', 'cloudformation:DeleteChangeSet', 'cloudformation:ExecuteChangeSet'],
            Effect: Allow,
            Resource: [!Join [':', [arn, aws, cloudformation, !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Join [/, [stack, !Join ['-', [awscodestar, !Ref 'ProjectId', lambda]], '*']]]]]
          }, {
            Action: ['iam:PassRole'],
            Effect: Allow,
            Resource: [!GetAtt [CloudFormationTrustRole, Arn]]}
          ]},
          PolicyName: CodeStarWorkerCodePipelineRolePolicy}]
  CodeStarProject:
    Type: AWS::CodeStar::Project
    Version: 1.0
    Description: Starting project creation
    Properties:
      ProjectDescription: AWS CodeStar created project
      ProjectId: !Ref 'ProjectId'
      ProjectName: !Ref 'AppName'
      ProjectTemplateId: arn:aws:codestar:us-east-1::project-template/webapp-nodeweb-lambda
      StackId: !Ref 'AWS::StackId'
  LambdaTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS Lambda
    DependsOn: [CodeStarProject]
    Properties:
      AssumeRolePolicyDocument:
        Statement: [{Action: 'sts:AssumeRole', Effect: Allow, Principal: {Service: [ lambda.amazonaws.com]}}]
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Path: /
      RoleName: !Join ['-', [CodeStarWorker, !Ref 'ProjectId', Lambda]]
      Policies: [{
        PolicyDocument: {
          Statement: [{
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
            Effect: Allow,
            Resource: '*'
          }],
          Version: 2012-10-17
        },
        PolicyName: CodeStarLambdaWorkerPolicy
      }]
  ProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    DependsOn: [SeedRepo, LambdaTrustRole, CodePipelineTrustRole, S3Bucket, CodeBuildProject, CloudFormationTrustRole]
    Properties:
      ArtifactStore:
        Location: !Ref 'S3Bucket'
        Type: S3
      Name: !Join ['-', [!Ref 'ProjectId', Pipeline]]
      RoleArn: !GetAtt [CodePipelineTrustRole, Arn]
      Stages: [{
        Name: Source,
        Actions: [{
          ActionTypeId: {
            Category: Source,
            Owner: AWS,
            Provider: CodeCommit,
            Version: 1
          },
          Configuration: {
            BranchName: master,
            RepositoryName: !Ref 'CodeCommitRepositoryName'
          },
          InputArtifacts: [],
          Name: ApplicationSource,
          OutputArtifacts: [{
            Name: !Join [ '-', [!Ref 'ProjectId', SourceArtifact]]
          }],
          RunOrder: 1
        }]
      }, {
        Name: Build,
        Actions: [{
          ActionTypeId: {
            Category: Build,
            Owner: AWS,
            Provider: CodeBuild,
            Version: 1
          },
          Configuration: {
            ProjectName: !Ref 'ProjectId'
          },
          InputArtifacts: [{
            Name: !Join ['-', [!Ref 'ProjectId', SourceArtifact]]
          }],
          Name: PackageExport,
          OutputArtifacts: [{
            Name: !Join ['-', [!Ref 'ProjectId', BuildArtifact]]
          }],
          RunOrder: 1
        }]
      }, {
        Name: Deploy,
        Actions: [{
          Name: GenerateChangeSet,
          ActionTypeId: {
            Category: Deploy,
            Owner: AWS,
            Provider: CloudFormation,
            Version: 1
          },
          Configuration: {
            ActionMode: CHANGE_SET_REPLACE,
            Capabilities: CAPABILITY_IAM,
            ChangeSetName: pipeline-changeset,
            ParameterOverrides: !Join ['', ['{"ProjectId":"', !Ref 'ProjectId', '"}']],
            RoleArn: !GetAtt [CloudFormationTrustRole, Arn],
            StackName: !Join [ '-', [awscodestar, !Ref 'ProjectId', lambda]],
            TemplatePath: !Join [ '', [!Ref 'ProjectId', -BuildArtifact, '::template-export.json']]
          },
          InputArtifacts: [{
            Name: !Join ['-', [!Ref 'ProjectId', BuildArtifact]]
          }],
          OutputArtifacts: [],
          RunOrder: 1
        }, {
          Name: ExecuteChangeSet,
          ActionTypeId: {
            Category: Deploy,
            Owner: AWS,
            Provider: CloudFormation,
            Version: 1
          },
          Configuration: {
            ActionMode: CHANGE_SET_EXECUTE,
            ChangeSetName: pipeline-changeset,
            StackName: !Join ['-', [awscodestar, !Ref 'ProjectId', lambda]]
          },
          InputArtifacts: [],
          OutputArtifacts: [],
          RunOrder: 2
        }]
      }]
  S3ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    DependsOn: [CodeStarProject]
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Id: SSEAndSSLPolicy
        Version: 2012-10-17
        Statement: [{
          Action: ['s3:GetObject', 's3:GetObjectVersion', 's3:GetBucketVersioning'],
          Condition: {Bool: {'aws:SecureTransport': false}},
          Effect: Allow,
          Principal: {
              AWS: [!GetAtt [CodePipelineTrustRole, Arn], !GetAtt [CodeBuildRole, Arn], !GetAtt [CloudFormationTrustRole, Arn]]
          },
          Resource: [!Join [ '', ['arn:aws:s3:::', !Ref 'S3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]],
          Sid: WhitelistedGet
        }, {
          Action: ['s3:PutObject'],
          Effect: Allow,
          Principal: {
            AWS: [!GetAtt [CodePipelineTrustRole, Arn], !GetAtt [CodeBuildRole, Arn]]
          },
          Resource: [!Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']], !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]],
          Sid: WhitelistedPut
        }]
  S3Bucket:
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    DependsOn: [CodeStarProject]
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [aws, codestar, !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref 'ProjectId', pipeline]]
      Tags: [{Key: Name, Value: !Join ['-', [!Ref 'ProjectId', S3Bucket]]}]
      VersioningConfiguration:
        Status: Enabled
  SeedRepo:
    Type: AWS::CodeStar::SeedRepository
    Description: Adding application source code to the AWS CodeCommit repository for the project
    DependsOn: [CodeCommitRepo]
    DeletionPolicy: Retain
    Properties:
      CodeCommitRepositoryURL: !GetAtt [CodeCommitRepo, CloneUrlHttp]
      DefaultBranchName: master
      ProjectTemplateId: arn:aws:codestar:us-east-1::project-template/webapp-nodeweb-lambda
  SyncInitialResources:
    Type: AWS::CodeStar::SyncResources
    Version: 1.0
    Description: Adding the AWS CodeCommit repository to your AWS CodeStar project.
    DependsOn: [SeedRepo]
    Properties:
      ProjectId: !Ref 'ProjectId'
  SyncResources:
    Type: AWS::CodeStar::SyncResources
    Version: 1.0
    Description: Adding all created resources to your AWS CodeStar project
    DependsOn: [SeedRepo, CodeBuildProject, ProjectPipeline, SyncInitialResources]
    Properties:
      ProjectId: !Ref 'ProjectId'
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket for Website static artifacts
    Condition: CreateWebSiteS3Bucket
    DependsOn: [CodeStarProject]
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [aws, codestar, !Ref 'AWS::Region', !Ref 'AWS::AccountId', !Ref 'ProjectId', website]]
      Tags: [{Key: Name, Value: !Join ['-', [!Ref 'ProjectId', WebsiteS3Bucket]]}]
      VersioningConfiguration:
        Status: Enabled
